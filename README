Introduction
------------

DCE authentication (based on Kerberos) was originally designed for an 
environment in which authentication was not a frequent event. The typical 
client would authenticate once in the morning, and utilize the 
credentials generated for the rest of the day. The typical server would 
authenticate at startup, and then regularly refresh the generated 
credentials on a relatively infrequent basis.

The environment in which DCE is often used today is quite different from
the original concept of how DCE would be used. Many sites use DCE
authentication to support non-DCE protocols such as IMAP and POP. These
protocols often require frequent authentication (some pop users feel the
need to check for new mail every minute), and performing a complete DCE
authentication on every access is both time-consuming and inefficient.

This package introduces an architecture for caching DCE credentials on a 
client and implements a PAM module that utilizes the architecture. 
Protocols such as IMAP and POP can now reutilize existing DCE credentials 
rather than generating new credentials on every authentication. 
Performance is greatly increased and security server load is dramatically 
lowered.

Note that this package does not currently replace an existing PAM DCE 
module. PAM DCE modules, both commercial and open source, are already 
available, and rather than duplicate existing functionality, this package
adds a caching layer wrapped around current modules.


Configuration
-------------

pam_dce_cache is configured out-of-the-box to access DCE credentials in 
the directory /opt/dcelocal/var/security/creds, and to store its cache
in /opt/dcelocal/var/security/cache. If DCE credentials are stored in a 
different location in your configuration, update CREDS_DIR defined in 
pam_dce_cache.c. To store the cache in a different location, update 
CACHE_DIR defined in pam_dce_cache.c as well as in S15-15pam_dce_cache.

By default, gcc will be used to compile. If you wish to use a different
compiler, update the Makefile with the correct value for CC and CFLAGS.  
Type 'make' to build pam_dce_cache, and 'make install' to install the
library pam_dce_cache.so.1 in /usr/lib/security and initialization script
S15-15pam_dce_cache in /etc/rc3.d. If your configuration requires PAM
modules to be located in a different directory, or the cache to be
initialized at a different stage, you'll need to install by hand.

Once pam_dce_cache has been installed, you'll need to update your PAM
configuration to use it. The current configuration in use at Cal Poly
Pomona is included in the file pam.conf, and has been tested under Solaris
2.6 with DCE 2.0. This configuration works correctly for login, dtlogin,
wftpd, and the University of Washington IMAP/POP distribution. It seems
that PAM clients are allowed to (ab)use the framework however they like,
so any local PAM clients should be tested for compatibility.

pam_dce_cache supports the following options:

  debug
    
    Spew debugging information to syslog.

  ignore_root

    Ignore the username root. Note that currently this only
    applies to actual username 'root', not other accounts with uid 0.

  update

    Attempt to update the cache with credentials generated by a prior
    module, rather than read credentials from the cache.

  use_first_pass

    Only use a password provided by a preceding module. If this option is
    not specified, pam_dce_cache will always request a password. If it is
    specified, pam_dce_cache will never request a password. Note that the
    option 'try_first_pass' is not currently implemented.

  credlife=<minutes>

    If credentials in the cache will expire within <minutes>, require a
    successful refresh to use them. The default value for credlife is 240
    minutes (4 hours). With a default ticket lifetime of eight hours,
    credentials in the cache will be usable for four hours before an
    additional DCE authentication will be required.


Security Considerations
-----------------------

Use of pam_dce_cache does have an impact on your system's overall security
posture. For many environments, the performance increase and benefits
gained will outweigh the potential security issues. However, every
environment is different and a system administrator should carefully
consider their security requirements and understand both local needs and
the following security issues before deciding whether or not implementing
pam_dce_cache is appropriate.

The most secure way to handle DCE credentials is to generate them on need
and destroy them once that need has been fulfilled. Credentials left
laying around on a machine could potentially be misused by an unauthorized
user if local security on that machine was compromised. pam_dce_cache
intentionally leaves credentials stored after they are used, so they might
be available the next time they're needed. Cached credentials can only be
read by root and the owner, so a local root compromise of the machine must
occur before the credentials can be abused. In most environments, few
users clean up credentials, so there are probably credentials already
piling up. At least with pam_dce_cache, there's only one set for each user 
:).

pam_dce_cache stores an MD5 hash of the user's password locally on the
system, which is used to authenticate access to the credentials. If the
machine was compromised, a dictionary attack could be performed on this
hash. root privileges are required to access the MD5 hash, and the same
privileges would allow an intruder to simply observe cleartext passwords
when users log in, so this does not introduce additional security risk.

If credentials are acquired from the cache, no DCE authentication takes 
place; in particular, if a user's password has been changed or their 
account expired, the locally cached credentials can still be used by 
supplying the password stored in the cache. The lifetime of cached 
credentials is configurable. When the lifetime has been exceeded, the 
current DCE password of an unexpired account must be supplied to refresh 
the credentials or generate new ones. The lifetime could range from 
minutes to days, depending on your security needs.

Since cached credentials don't reflect recent group membership changes, 
their use might allow or deny access inappropriately. Credentials are only 
generated when not found in the cache or the user's password no longer 
matches the one stored in the cache. Expired credentials in the cache are 
refreshed rather than regenerated, which does not update group membership. 
To ensure accurate group membership, a user's password should be changed 
after important group updates.


Changes
-------

0.5 - First public release.


Feedback/Availability
---------------------

Please report any bugs or feature requests to <henson@acm.org>.


The latest version of pam_dce_cache is currently available at

http://www.csupomona.edu/~henson/www/projects/pam_dce_cache/

